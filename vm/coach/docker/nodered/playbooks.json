[
  {
    "id": "tab-coach-playbooks",
    "type": "tab",
    "label": "Coach Playbooks",
    "disabled": false,
    "info": "HTTP endpoints to trigger playbook nudges without changing existing flows. Uses HA_* env vars."
  },
  {
    "id": "in-playbook-get",
    "type": "http in",
    "z": "tab-coach-playbooks",
    "name": "GET /playbook/:name",
    "url": "/playbook/:name",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 150,
    "y": 80,
    "wires": [["fn-playbook-build"]]
  },
  {
    "id": "in-playbook-post",
    "type": "http in",
    "z": "tab-coach-playbooks",
    "name": "POST /playbook",
    "url": "/playbook",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 150,
    "y": 140,
    "wires": [["json-post","fn-playbook-build"]]
  },
  {
    "id": "json-post",
    "type": "json",
    "z": "tab-coach-playbooks",
    "name": "Parse JSON",
    "property": "payload",
    "action": "obj",
    "pretty": false,
    "x": 360,
    "y": 140,
    "wires": [["fn-playbook-build"]]
  },
  {
    "id": "fn-playbook-build",
    "type": "function",
    "z": "tab-coach-playbooks",
    "name": "Build HA request (playbook)",
    "func": "// Read env\nconst token = env.get('HA_TOKEN');\nconst base = env.get('HA_BASE_URL') || 'http://homeassistant:8123';\nlet svc = env.get('HA_NOTIFY_SERVICE') || 'mobile_app_masterblaster';\nsvc = String(svc).replace(/^notify\./,''); // REST slug must not include 'notify.'\n\n// Determine playbook name\nlet name = ''\nif (msg.req && msg.req.params && msg.req.params.name) {\n  name = String(msg.req.params.name||'').toLowerCase();\n} else if (msg.payload && msg.payload.name) {\n  name = String(msg.payload.name||'').toLowerCase();\n}\n\n// Static map aligned with configs/coach/playbooks templates (no file IO)\nconst PB = {\n  morning_boot: {\n    title: 'Morning Boot',\n    steps: [\n      'Water + light exposure within 15 min of wake',\n      'Meds as scheduled (with/without food per rules)',\n      'Breakfast within 60 min of wake',\n      'Plan first deep-work block start time'\n    ]\n  },\n  deep_work_block: {\n    title: 'Deep Work – End Ritual',\n    steps: [\n      'Save work, quick summary',\n      'Stand up, water, 60s breathing',\n      'Prepare next context'\n    ]\n  },\n  bedtime_winddown: {\n    title: 'Bedtime Wind-down',\n    steps: [\n      'Dim lights',\n      'Breathing exercise 4-7-8 (2 min)',\n      'Set out morning clothes and pillbox'\n    ]\n  },\n  behind_move_pace: {\n    title: 'Behind Move Pace',\n    steps: [\n      '7-min walk after next block',\n      'Protein-forward snack'\n    ]\n  },\n  low_restful_sleep: {\n    title: 'Low Restful Sleep – Today',\n    steps: [\n      'Shorter work blocks (25 min)',\n      'No caffeine after 14:00',\n      'Wind-down lights at 21:15'\n    ]\n  }\n};\n\nif (!name || !PB[name]) {\n  // If unknown, return 404 and do not call HA\n  node.status({fill:'yellow',shape:'ring',text:'unknown playbook: ' + name});\n  if (msg.res) {\n    msg.statusCode = 404;\n    msg.payload = { ok:false, error:'unknown playbook', name:name };\n    return [null, msg, null];\n  } else {\n    return [null, null, null];\n  }\n}\n\nconst pb = PB[name];\nconst lines = pb.steps.join('\n• ');\n\n// Build HA request\nmsg.headers = {\n  Authorization: 'Bearer ' + token,\n  'Content-Type': 'application/json'\n};\nmsg.url = `${base}/api/services/notify/${svc}`;\nmsg.method = 'POST';\nmsg.payload = {\n  title: 'Coach – ' + pb.title,\n  message: '• ' + lines,\n  data: { tag: 'coach', importance: 'high' }\n};\n\n// Also prepare a JSON response body for the HTTP client\nconst response = { ok:true, name:name, title:pb.title, steps:pb.steps };\nmsg.playbook_response = response;\nreturn [msg, null, response];",
    "outputs": 3,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 100,
    "wires": [["ha-playbook","dbg-playbook"],["out-404"],["out-200-json"]]
  },
  {
    "id": "ha-playbook",
    "type": "http request",
    "z": "tab-coach-playbooks",
    "name": "HA notify REST (playbook)",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 760,
    "y": 80,
    "wires": [["dbg-ha-playbook","out-200-playbook"]]
  },
  {
    "id": "out-200-playbook",
    "type": "http response",
    "z": "tab-coach-playbooks",
    "name": "200 OK",
    "statusCode": "200",
    "headers": {},
    "x": 990,
    "y": 80,
    "wires": []
  },
  {
    "id": "out-404",
    "type": "http response",
    "z": "tab-coach-playbooks",
    "name": "404 Unknown",
    "statusCode": "404",
    "headers": {},
    "x": 640,
    "y": 140,
    "wires": []
  },
  {
    "id": "out-200-json",
    "type": "http response",
    "z": "tab-coach-playbooks",
    "name": "200 OK (JSON)",
    "statusCode": "200",
    "headers": {},
    "x": 640,
    "y": 200,
    "wires": []
  },
  {
    "id": "dbg-playbook",
    "type": "debug",
    "z": "tab-coach-playbooks",
    "name": "Playbook req",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 620,
    "y": 100,
    "wires": []
  },
  {
    "id": "dbg-ha-playbook",
    "type": "debug",
    "z": "tab-coach-playbooks",
    "name": "HA resp (playbook)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 980,
    "y": 40,
    "wires": []
  }
]
