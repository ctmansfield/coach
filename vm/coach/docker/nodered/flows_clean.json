[
  {
    "id": "tab1",
    "type": "tab",
    "label": "Coach Minimal",
    "disabled": false,
    "info": "Minimal flow: HTTP ingest -> risk/message -> HA notify via REST. No CGM."
  },
  {
    "id": "http_in_events",
    "type": "http in",
    "z": "tab1",
    "name": "Ingest Events",
    "url": "/events",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 140,
    "y": 120,
    "wires": [["json_parse"]]
  },
  {
    "id": "json_parse",
    "type": "json",
    "z": "tab1",
    "name": "Parse JSON",
    "property": "payload",
    "action": "obj",
    "pretty": false,
    "x": 340,
    "y": 120,
    "wires": [["fn_risk_msg"]]
  },
  {
    "id": "fn_risk_msg",
    "type": "function",
    "z": "tab1",
    "name": "Risk + Message",
    "func": "// Simple scoring and message (no CGM)\nvar evt = msg.payload || {};\nvar type = String(evt.type || 'UNKNOWN').toUpperCase();\nvar risk = 0;\nvar title = 'Coach';\nvar text = '';\n\nif (type === 'MEAL_MISSED') {\n  var minutes = Number(evt.minutes_late || 0);\n  risk = Math.min(30, minutes * 0.2);\n  text = 'Meal is ' + minutes + ' min late. Quick protein snack or start meal window?';\n} else if (type === 'TIMEBOX_END') {\n  var nextTask = evt.next_task || 'next block';\n  text = 'Block complete. Switch to: ' + nextTask + '.';\n  risk = 5;\n} else {\n  text = 'Event: ' + type;\n}\n\nmsg.ha = {\n  title: title,\n  message: text,\n  data: { tag: 'coach', importance: 'high' }\n};\n\n// Prepare HA REST call\nmsg.headers = {\n  Authorization: 'Bearer ' + (env.get('HA_TOKEN') || 'changeme'),\n  'Content-Type': 'application/json'\n};\nvar base = env.get('HA_BASE_URL') || 'http://homeassistant:8123';\nvar svc  = env.get('HA_NOTIFY_SERVICE') || 'notify.mobile_app_your_device';\nvar svcPath = String(svc).replace(/^notify\\./,'');\nmsg.url = base + '/api/services/notify/' + svcPath;\nmsg.method = 'POST';\nmsg.payload = msg.ha;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 560,
    "y": 120,
    "wires": [["ha_post","switch_http"]]
  },
  {
    "id": "ha_post",
    "type": "http request",
    "z": "tab1",
    "name": "HA notify REST",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 790,
    "y": 100,
    "wires": [["debug_resp"]]
  },
  {
    "id": "switch_http",
    "type": "switch",
    "z": "tab1",
    "name": "HTTP req?",
    "property": "res",
    "propertyType": "msg",
    "rules": [
      {"t": "nnull"}
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 620,
    "y": 170,
    "wires": [["http_resp_ok"]]
  },
  {
    "id": "http_resp_ok",
    "type": "http response",
    "z": "tab1",
    "name": "200 OK",
    "statusCode": "200",
    "headers": {},
    "x": 790,
    "y": 150,
    "wires": []
  },
  {
    "id": "debug_resp",
    "type": "debug",
    "z": "tab1",
    "name": "HA resp",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 990,
    "y": 100,
    "wires": []
  },
  {
    "id": "http_in_health",
    "type": "http in",
    "z": "tab1",
    "name": "Health",
    "url": "/health",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 120,
    "y": 200,
    "wires": [["http_health_ok"]]
  },
  {
    "id": "http_health_ok",
    "type": "http response",
    "z": "tab1",
    "name": "200 OK (health)",
    "statusCode": "200",
    "headers": {},
    "x": 340,
    "y": 200,
    "wires": []
  },
  {
    "id": "inject_tb",
    "type": "inject",
    "z": "tab1",
    "name": "Test TIMEBOX_END",
    "props": [{"p":"payload"}],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"type\":\"TIMEBOX_END\",\"next_task\":\"Stand, water, 1 flashcard\"}",
    "payloadType": "json",
    "x": 200,
    "y": 240,
    "wires": [["fn_risk_msg"]]
  },
  {
    "id": "inject_meal",
    "type": "inject",
    "z": "tab1",
    "name": "Test MEAL_MISSED",
    "props": [{"p":"payload"}],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"type\":\"MEAL_MISSED\",\"minutes_late\":25}",
    "payloadType": "json",
    "x": 210,
    "y": 280,
    "wires": [["fn_risk_msg"]]
  }
]
